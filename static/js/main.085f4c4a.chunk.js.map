{"version":3,"sources":["DayDetail.js","weatherActions.js","niceDate.js","App.js","serviceWorker.js","weatherReducer.js","index.js"],"names":["DayDetail","Component","degWind","render","console","log","this","props","list","weatherData","forEach","item","dt_txt","split","match","params","id","push","currDate","map","className","slice","Math","round","main","temp","alt","weather","w","src","iconUrl","icon","humidity","grnd_level","wind","speed","deg","dt","connect","store","SET_TOKEN","SET_WEATHER","SET_CURR_DATE","SET_CITY","NiceDate","constructor","super","niceDate","month","date","App","getWeather","city","a","idCity","setWeatherAction","setCityAction","fetch","baseUrl","token","api_call","json","response","compareTxtData","curData","data","arrCur","arr","length","i","setDate","setCurrentDateAction","Cities","code","onClick","name","weatherDaysData","to","path","component","dispatch","type","payload","setCity","setCurrentDate","Boolean","window","location","hostname","initialState","createStore","state","action","find","x","Object","assign","applyMiddleware","thunk","logger","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.085f4c4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currDate: store.currDate,\r\n        weatherData: store.weatherData,\r\n        iconUrl: store.iconUrl,\r\n    };\r\n};\r\n\r\nclass DayDetail extends Component {\r\n    degWind = ['с', 'с-в', 'в', 'ю-в', 'ю', 'ю-з', 'з', 'с-з', 'с'];\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        let list = [];\r\n        if (this.props.weatherData && this.props.weatherData.list)\r\n            this.props.weatherData.list.forEach(item => {\r\n                if (item.dt_txt.split(' ')[0] === this.props.match.params.id)\r\n                    list.push(item);\r\n            });\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.currDate !== '' &&\r\n                    list.map(item =>\r\n                        <div key={item.dt} className=\"rowTimeDay\">\r\n                            <span className=\"rowTimeDayVal\">{item.dt_txt.split(' ')[1].slice(0, 5)}</span>\r\n                            <div className=\"spacer\"/>\r\n                            <span className=\"rowTimeDayVal\">{Math.round(item.main.temp)}&#8451;</span>\r\n                            <img alt={item.weather.map(w => w.main)} src={this.props.iconUrl + item.weather.map(w => w.icon)+'.png'}/>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">{item.main.humidity}%</div>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">{Math.round(item.main.grnd_level * 7.5006) / 10} мм рт.ст.</div>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">Ветер {Math.round(item.wind.speed)}м/с ({this.degWind[Math.round(item.wind.deg/45)]})</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(DayDetail);","export const SET_TOKEN = 'SET_TOKEN';\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\nexport const SET_CURR_DATE = 'SET_CURR_DATE';\r\nexport const SET_CITY = 'SET_CITY';\r\n\r\nexport function setToken(token) {\r\n    return {\r\n        type: SET_TOKEN,\r\n        payload: token\r\n    }\r\n}\r\n\r\nexport function setCity(city) {\r\n    return {\r\n        type: SET_CITY,\r\n        payload: city\r\n    }\r\n}\r\n\r\nexport function setWeather(data) {\r\n    return {\r\n        type: SET_WEATHER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport function setCurrentDate(date) {\r\n    return {\r\n        type: SET_CURR_DATE,\r\n        payload: date\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass NiceDate extends Component {\r\n    niceDate = '';\r\n    month = ['Янв.', 'Фев.', 'Март.', 'Апр.', 'Май.', 'Июнь.', 'Июль.', 'Авг.', 'Сент.', 'Окт.', 'Нояб.', 'Дек.'];\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let date = this.props.date.split(' ')[0].split('-');\r\n\r\n        this.niceDate = `${date[2]} ${this.month[+date[1] - 1]}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.niceDate}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NiceDate;","import React, { Component } from 'react';\r\nimport DayDetail from \"./DayDetail\";\r\nimport { connect } from 'react-redux';\r\nimport {setWeather, setCurrentDate, setCity} from \"./weatherActions\";\r\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\r\nimport NiceDate from \"./niceDate\";\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        weatherData: store.weatherData,\r\n        token: store.token,\r\n        baseUrl: store.baseUrl,\r\n        idCity: store.idCity,\r\n        weatherDaysData: store.weatherDaysData,\r\n        iconUrl: store.iconUrl,\r\n        currDate: store.currDate,\r\n        Cities: store.Cities\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCityAction: city => dispatch(setCity(city)),\r\n        setWeatherAction: weather => dispatch(setWeather(weather)),\r\n        setCurrentDateAction: date => dispatch(setCurrentDate(date))\r\n    }\r\n};\r\nclass App extends Component {\r\n    getWeather = async (city) => {\r\n        if (city === this.props.idCity) {\r\n            this.props.setWeatherAction({list: []});\r\n            this.props.setCityAction(null);\r\n        }\r\n        else {\r\n            const api_call = await fetch(`${this.props.baseUrl}?id=${city}&units=metric&appid=${this.props.token}`);\r\n\r\n            const response = await api_call.json();\r\n\r\n            this.props.setWeatherAction(response);\r\n            this.props.setCityAction(city);\r\n        }\r\n    };\r\n\r\n    compareTxtData(curData, data) {\r\n        const arrCur = curData.split('-');\r\n        const arr = data.split('-');\r\n        if (arrCur.length !== arr.length)\r\n            return false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arrCur[i] !== arr[i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setDate(item) {\r\n        let date = item.dt_txt.split(' ')[0];\r\n        if (this.compareTxtData(this.props.currDate, date))\r\n            date = '';\r\n        this.props.setCurrentDateAction(date)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"city-header\">\r\n                    {\r\n                        this.props.Cities.map(city =>\r\n                            <button key={city.code}\r\n                                    className={city.code === this.props.idCity ? 'city-button-active city-button' : 'city-button'}\r\n                                    onClick={() => this.getWeather(city.code)}>{city.name}</button>\r\n                        )\r\n                    }\r\n                </div>\r\n                <Router>\r\n                    <div className=\"content\">\r\n                        <div className=\"rowDays\">\r\n                            {\r\n                                this.props.weatherDaysData &&\r\n                                this.props.weatherDaysData.list &&\r\n                                this.props.weatherDaysData.list.map(item =>\r\n                                    <NavLink key={item.dt} to={item.dt_txt.split(' ')[0]}\r\n                                             onClick={() => this.setDate(item)}>\r\n                                        <div key={item.dt} className={item.dt_txt.split(' ')[0] === this.props.currDate ? 'activeCardDay' : 'cardDay'}>\r\n                                            <img alt={item.weather.map(w => w.main)}\r\n                                                 src={this.props.iconUrl + item.weather.map(w => w.icon) + '.png'}/>\r\n                                            <div className=\"data_temp\">\r\n                                                <NiceDate date={item.dt_txt}/>\r\n                                                <span>{Math.round(item.main.temp)}&#8451;</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </NavLink>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <Route path=\"/:id\" component={DayDetail}/>\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {SET_TOKEN, SET_WEATHER, SET_CURR_DATE, SET_CITY} from './weatherActions';\r\n\r\nconst Cities = [\r\n    {\r\n        code: '2643741',\r\n        name: 'Лондон'\r\n    },\r\n    {\r\n        code: '498817',\r\n        name: 'Санкт-Петербург'\r\n    },\r\n    {\r\n        code: '524894',\r\n        name: 'Москва'\r\n    },\r\n    {\r\n        code: '2968815',\r\n        name: 'Париж'\r\n    },\r\n    {\r\n        code: '292223',\r\n        name: 'Дубаи'\r\n    },\r\n    {\r\n        code: '491422',\r\n        name: 'Сочи'\r\n    },\r\n    {\r\n        code: '2673722',\r\n        name: 'Стокгольм'\r\n    }\r\n]\r\n\r\nconst initialState = {\r\n    weatherData: [],\r\n    weatherDaysData: [],\r\n    token: '3bebdda89631980556d5ee2faeee2cce',\r\n    baseUrl: 'https://api.openweathermap.org/data/2.5/forecast',\r\n    idCity: null,\r\n    iconUrl: 'https://openweathermap.org/img/w/',\r\n    currDate: '',\r\n    Cities: Cities\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.payload\r\n            };\r\n        case SET_CITY:\r\n            return {\r\n                ...state,\r\n                idCity: action.payload\r\n            };\r\n        case SET_WEATHER:\r\n            let list = [];\r\n            action.payload.list.forEach(item => {\r\n                if (+item.dt_txt.split(' ')[1].split(':')[0] >= 12 && !list.find(x => x.dt_txt.split(' ')[0] === item.dt_txt.split(' ')[0]))\r\n                    list.push(item);\r\n            });\r\n            return {\r\n                ...state,\r\n                weatherData: Object.assign({}, action.payload),\r\n                weatherDaysData: Object.assign({},\r\n                    {\r\n                        ...action.payload,\r\n                        list: list\r\n                    })\r\n            };\r\n        case SET_CURR_DATE:\r\n            return {\r\n                ...state,\r\n                currDate: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport {weatherReducer} from \"./weatherReducer\";\r\n\r\nconst store = createStore(weatherReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}