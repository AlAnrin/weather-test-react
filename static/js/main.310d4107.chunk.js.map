{"version":3,"sources":["DayDetail.js","weatherActions.js","niceDate.js","App.js","serviceWorker.js","weatherReducer.js","index.js"],"names":["DayDetail","degWind","_this2","this","console","log","props","list","weatherData","forEach","item","dt_txt","split","match","params","id","push","react_default","a","createElement","map","key","dt","className","slice","Math","round","main","temp","alt","weather","w","src","iconUrl","icon","humidity","grnd_level","wind","speed","deg","Component","connect","store","SET_TOKEN","SET_WEATHER","SET_CURR_DATE","NiceDate","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","niceDate","month","date","concat","App","getWeather","asyncToGenerator","regenerator_default","mark","_callee","api_call","response","wrap","_context","prev","next","fetch","baseUrl","idCity","token","sent","json","setWeatherAction","stop","react_router_dom","weatherDaysData","to","onClick","setCurrentDateAction","currDate","react_router","path","component","dispatch","type","payload","setCurrentDate","Boolean","window","location","hostname","initialState","createStore","state","arguments","length","undefined","action","objectSpread","find","x","assign","applyMiddleware","thunk","logger","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.310d4107.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        weatherData: store.weatherData,\r\n        iconUrl: store.iconUrl,\r\n    };\r\n};\r\n\r\nclass DayDetail extends Component {\r\n    degWind = ['с', 'с-в', 'в', 'ю-в', 'ю', 'ю-з', 'з', 'с-з', 'с'];\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        let list = [];\r\n        if (this.props.weatherData && this.props.weatherData.list)\r\n            this.props.weatherData.list.forEach(item => {\r\n                if (item.dt_txt.split(' ')[0] === this.props.match.params.id)\r\n                    list.push(item);\r\n            });\r\n        return (\r\n            <div>\r\n                {\r\n                    list.map(item =>\r\n                        <div key={item.dt} className=\"rowTimeDay\">\r\n                            <span className=\"rowTimeDayVal\">{item.dt_txt.split(' ')[1].slice(0, 5)}</span>\r\n                            <div className=\"spacer\"/>\r\n                            <span className=\"rowTimeDayVal\">{Math.round(item.main.temp)}&#8451;</span>\r\n                            <img alt={item.weather.map(w => w.main)} src={this.props.iconUrl + item.weather.map(w => w.icon)+'.png'}/>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">{item.main.humidity}%</div>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">{Math.round(item.main.grnd_level * 7.5006) / 10} мм рт.ст.</div>\r\n                            <div className=\"spacer\"/>\r\n                            <div className=\"rowTimeDayVal\">Ветер {Math.round(item.wind.speed)}м/с ({this.degWind[Math.round(item.wind.deg/45)]})</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(DayDetail);","export const SET_TOKEN = 'SET_TOKEN';\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\nexport const SET_CURR_DATE = 'SET_CURR_DATE';\r\n\r\nexport function setToken(token) {\r\n    return {\r\n        type: SET_TOKEN,\r\n        payload: token\r\n    }\r\n}\r\n\r\nexport function setWeather(data) {\r\n    return {\r\n        type: SET_WEATHER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport function setCurrentDate(date) {\r\n    return {\r\n        type: SET_CURR_DATE,\r\n        payload: date\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass NiceDate extends Component {\r\n    niceDate = '';\r\n    month = ['Янв.', 'Фев.', 'Март.', 'Апр.', 'Май.', 'Июнь.', 'Июль.', 'Авг.', 'Сент.', 'Окт.', 'Нояб.', 'Дек.'];\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let date = this.props.date.split(' ')[0].split('-');\r\n\r\n        this.niceDate = `${date[2]} ${this.month[+date[1] - 1]}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.niceDate}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NiceDate;","import React, { Component } from 'react';\r\nimport DayDetail from \"./DayDetail\";\r\nimport { connect } from 'react-redux';\r\nimport {setWeather, setCurrentDate} from \"./weatherActions\";\r\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\r\nimport NiceDate from \"./niceDate\";\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        weatherData: store.weatherData,\r\n        token: store.token,\r\n        baseUrl: store.baseUrl,\r\n        idCity: store.idCity,\r\n        weatherDaysData: store.weatherDaysData,\r\n        iconUrl: store.iconUrl,\r\n        currDate: store.currDate\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWeatherAction: weather => dispatch(setWeather(weather)),\r\n        setCurrentDateAction: date => dispatch(setCurrentDate(date))\r\n    }\r\n};\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getWeather();\r\n    }\r\n\r\n    getWeather = async () => {\r\n        const api_call = await fetch(`${this.props.baseUrl}?id=${this.props.idCity}&units=metric&appid=${this.props.token}`);\r\n\r\n        const response = await api_call.json();\r\n\r\n        this.props.setWeatherAction(response);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Router>\r\n                        <div>\r\n                            <div className=\"rowDays\">\r\n                                {\r\n                                    this.props.weatherDaysData &&\r\n                                    this.props.weatherDaysData.list &&\r\n                                    this.props.weatherDaysData.list.map(item =>\r\n                                        <NavLink to={item.dt_txt.split(' ')[0]}\r\n                                              onClick={() => this.props.setCurrentDateAction(item.dt_txt.split(' ')[0])}>\r\n                                            <div key={item.dt} className={item.dt_txt.split(' ')[0] === this.props.currDate ? 'activeCardDay' : 'cardDay'}>\r\n                                                <img alt={item.weather.map(w => w.main)}\r\n                                                     src={this.props.iconUrl + item.weather.map(w => w.icon) + '.png'}/>\r\n                                                <div className=\"data_temp\">\r\n                                                    <NiceDate date={item.dt_txt}/>\r\n                                                    <span>{Math.round(item.main.temp)}&#8451;</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </NavLink>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <Route path=\"/:id\" component={DayDetail}/>\r\n                        </div>\r\n                    </Router>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SET_TOKEN, SET_WEATHER, SET_CURR_DATE} from './weatherActions';\r\n\r\nconst initialState = {\r\n    weatherData: [],\r\n    weatherDaysData: [],\r\n    token: '3bebdda89631980556d5ee2faeee2cce',\r\n    baseUrl: 'http://api.openweathermap.org/data/2.5/forecast',\r\n    idCity: '498817',\r\n    iconUrl: 'http://openweathermap.org/img/w/',\r\n    currDate: ''\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.payload\r\n            };\r\n        case SET_WEATHER:\r\n            let list = [];\r\n            action.payload.list.forEach(item => {\r\n                if (+item.dt_txt.split(' ')[1].split(':')[0] >= 12 && !list.find(x => x.dt_txt.split(' ')[0] === item.dt_txt.split(' ')[0]))\r\n                    list.push(item);\r\n            });\r\n            return {\r\n                ...state,\r\n                weatherData: Object.assign({}, action.payload),\r\n                weatherDaysData: Object.assign({},\r\n                    {\r\n                        ...action.payload,\r\n                        list: list\r\n                    })\r\n            };\r\n        case SET_CURR_DATE:\r\n            return {\r\n                ...state,\r\n                currDate: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport {weatherReducer} from \"./weatherReducer\";\n\nconst store = createStore(weatherReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}